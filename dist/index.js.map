{"version":3,"file":"index.js","sources":["../src/utils.ts","../src/index.ts"],"sourcesContent":["import { RouteConfig } from './types';\n\nexport function hasDuplicateRoutes(config: RouteConfig): boolean {\n  function checkBranch(\n    currentConfig: RouteConfig,\n    seenRoutes: Set<string> = new Set()\n  ): boolean {\n    if (currentConfig.branches) {\n      const branchSeenRoutes = new Set<string>();\n      for (const branch of currentConfig.branches) {\n        if (branchSeenRoutes.has(branch.route)) {\n          return true;\n        }\n        branchSeenRoutes.add(branch.route);\n        if (checkBranch(branch)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  return checkBranch(config);\n}\n\nexport function validateRoute(route: string, config: RouteConfig): boolean {\n  const routeParts = route.split('/').filter(Boolean);\n\n  function matchRoute(parts: string[], currentConfig: RouteConfig): boolean {\n    if (parts.length === 0) {\n      return true;\n    }\n\n    const [currentPart, ...remainingParts] = parts;\n    const configRoute = currentConfig.route;\n\n    // Handle empty root route\n    if (configRoute === '' && currentConfig.branches) {\n      return currentConfig.branches.some((branch) => matchRoute(parts, branch));\n    }\n\n    // Check if current part matches config route or is a parameter\n    const isMatch =\n      currentPart === configRoute ||\n      (configRoute.startsWith('{') && configRoute.endsWith('}'));\n\n    if (!isMatch) {\n      return false;\n    }\n\n    // If we have more parts to match but no branches, invalid\n    if (remainingParts.length > 0 && !currentConfig.branches) {\n      return false;\n    }\n\n    // If we've matched all parts, valid\n    if (remainingParts.length === 0) {\n      return true;\n    }\n\n    // Try to match remaining parts against branches\n    return (\n      currentConfig.branches?.some((branch) =>\n        matchRoute(remainingParts, branch)\n      ) ?? false\n    );\n  }\n\n  return matchRoute(routeParts, config);\n}\n\nexport function extractParamsFromPath(\n  templateRoute: string,\n  actualPath: string\n): Record<string, string> {\n  const templateParts = templateRoute.split('/').filter(Boolean);\n  const pathParts = actualPath.split('/').filter(Boolean);\n  const params: Record<string, string> = {};\n\n  templateParts.forEach((part, index) => {\n    if (part.startsWith('{') && part.endsWith('}')) {\n      const paramName = part.slice(1, -1);\n      params[paramName] = pathParts[index] || '';\n    }\n  });\n\n  return params;\n}\n\nexport function extractRequiredParams(route: string): string[] {\n  return route\n    .split('/')\n    .filter(Boolean)\n    .filter((part) => part.startsWith('{') && part.endsWith('}'))\n    .map((part) => part.slice(1, -1));\n}\n","import {\n  RouteConfig,\n  ValidRoutes,\n  RouteParams,\n  URLManagerOptions,\n} from './types';\nimport {\n  validateRoute,\n  extractParamsFromPath,\n  extractRequiredParams,\n  hasDuplicateRoutes,\n} from './utils';\n\nexport function createURLManager<T extends RouteConfig>(config: T) {\n  if (hasDuplicateRoutes(config)) {\n    throw new Error('Config contains duplicate routes in the same branch');\n  }\n\n  return function buildURL<Route extends ValidRoutes<T>>(\n    route: Route,\n    params?: Partial<RouteParams<Route>>,\n    options?: URLManagerOptions\n  ): string {\n    if (!validateRoute(route, config)) {\n      throw new Error(`Invalid route: ${route}`);\n    }\n\n    const currentPath =\n      options?.currentPath ||\n      (typeof window !== 'undefined' ? window.location.pathname : '');\n    const existingParams = extractParamsFromPath(route, currentPath);\n    const requiredParams = extractRequiredParams(route);\n\n    let finalUrl = route as string;\n    for (const paramName of requiredParams) {\n      const paramValue =\n        params?.[paramName as keyof typeof params] || existingParams[paramName];\n\n      if (!paramValue) {\n        throw new Error(`Missing required parameter: ${paramName}`);\n      }\n\n      finalUrl = finalUrl.replace(`{${paramName}}`, paramValue);\n    }\n\n    return '/' + finalUrl.replace(/^\\/+|\\/+$/g, '');\n  };\n}\n\nexport type { RouteConfig, ValidRoutes, RouteParams, URLManagerOptions };"],"names":[],"mappings":"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"}